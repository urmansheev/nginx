user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
	use epoll;
	worker_connections 1024;

	# Будет принимать максимально возможное количество соединений 
	multi_accept on;
}

http {
	# Метод отправки данных sendfile более эффективен, чем стандартный метод read+write 
	sendfile on;

	# Будет отправлять заголовки и начало файла в одном пакете 
	tcp_nopush on;
	tcp_nodelay on;

	# Будет ждать 30 секунд перед закрытием keepalive соединения
	keepalive_timeout 30;

	# Максимальное количество keepalive запросов от одного клиента
	keepalive_requests 100;

	# Если клиент перестал читать отвечать, Nginx будет сбрасывать соединение с ним 
	reset_timedout_connection on;

	# Будет ждать 10 секунд тело запроса от клиента, после чего сбросит соединение 
	client_body_timeout 3m;

	# Как долго ждать, пока клиент отправит заголовок запроса	
	client_header_timeout 3m;

	client_max_body_size 1m;

	# Если размер тела запроса больше размера буфера, то полное (или частичное) тело запроса записывается во временный файл 
	client_body_buffer_size 128k;

	# Размер буфера для чтения заголовка запроса клиента 
	client_header_buffer_size 3m;

	# Максимальное количество и размер буферов для чтения больших заголовков из клиентского запроса 
	large_client_header_buffers 4 256k;

	# Если клиент прекратит чтение ответа, Nginx подождет 2 секунды и сбросит соединение
	send_timeout 2;

	types_hash_max_size 100;
	server_tokens off;

	server_names_hash_bucket_size 64;
	server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# SSL Settings
	##

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;

	##
	# Logging Settings
	##

	access_log off;
	error_log /var/log/nginx/error.log crit;
	#access_log  /var/log/nginx/access.log upstream;
	log_format upstream '$upstream_addr | $upstream_status | $upstream_response_time | $request_id | $time_local | $remote_addr | $request';
	#access_log  /var/log/nginx/access.log;
	##
	# Cache
	## 

	# Определяет максимальное количество файлов, информация о которых будет содержаться в кеше
	open_file_cache max=200000 inactive=20s;

	# Определяет через какое время информация будет удалена из кеша
	open_file_cache_valid 30s;

	# Будет кешировать информацию о тех файлах, которые были использованы хотя бы 2 раза
	open_file_cache_min_uses 2;

	# Будет кешировать информацию об отсутствующих файлах
	open_file_cache_errors on;

	# Ограничить количество подключений на IP 
	limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

	# Ограничить количество запросов для этой сессии 
	limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=10r/s;

	# По умолчанию ваш NGINX не имеет всех необходимых заголовков безопасности,
	# что на самом деле довольно просто. Они предотвращают атаки по щелчку, 
	# межсайтовые сценарии и другие атаки на код. 
	add_header X-Frame-Options "SAMEORIGIN" always;
	add_header X-XSS-Protection "1; mode=block" always;
	add_header X-Content-Type-Options "nosniff" always;
	add_header Referrer-Policy "no-referrer-when-downgrade" always;
	add_header Content-Security-Policy "default-src * data: 'unsafe-eval' 'unsafe-inline'" always;
	add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

	#include /etc/nginx/mime.types;
	#default_type application/octet-stream;

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;
}

# grep processor /proc/cpuinfo
# net.core.somaxconn = 65536
# net.ipv4.tcp_max_tw_buckets = 1440000

